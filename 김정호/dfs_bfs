💬 음료수 얼려 먹기
N x M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다. 
구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다. 
이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.

SourceCode (재귀함수x dfs 사용)
N, M = map(int, input().split())
dx=[0,0,-1,1]
dy=[1,-1,0,0]
graph = []
for i in range(N):
    graph.append(list(map(int, input().split())))
stack=[]
count=0
def dfs(x,y):
    if graph[x][y]!=0:
        return False
    stack.append((x,y))
    graph[x][y]=1

    while stack:
        x,y=stack.pop()
        for i in range(4):
            now_x=x+dx[i]
            now_y=y+dy[i]
            if now_x>=0 and now_x<M and now_y>=0 and now_y<N:
                if graph[now_x][now_y]==0:
                    stack.append((now_x,now_y))
                    graph[now_x][now_y]=1
    return True
for i in range(N):
    for u in range(M):
        if dfs(u,i) is True:
            count+=1
print(count)

SourceCode (재귀함수x bfs 사용)
from collections import deque
N, M = map(int, input().split())
dx=[0,0,-1,1]
dy=[1,-1,0,0]
graph = []
for i in range(N):
    graph.append(list(map(int, input().split())))
deq=deque()
count=0
def dfs(x,y):
    if graph[x][y]!=0:
        return False
    deq.append((x,y))
    graph[x][y]=1

    while deq:
        x,y=deq.popleft()
        for i in range(4):
            now_x=x+dx[i]
            now_y=y+dy[i]
            if now_x>=0 and now_x<M and now_y>=0 and now_y<N:
                if graph[now_x][now_y]==0:
                    deq.append((now_x,now_y))
                    graph[now_x][now_y]=1
    return True
for i in range(N):
    for u in range(M):
        if dfs(u,i) is True:
            count+=1
print(count)

SourceCode (재귀함수 사용)
N, M = map(int, input().split())
dx=[0,0,-1,1]
dy=[1,-1,0,0]
graph = []
for i in range(N):
    graph.append(list(map(int, input().split())))
count=0
def dfs(x,y):
    if graph[x][y]!=0:
        return False
    graph[x][y] = 1
    for i in range(4):
        new_x = x + dx[i]
        new_y=y+ dy[i]
        if 0<=new_x and new_x<M and new_y>=0 and new_y<N:
            if graph[new_x][new_y]==0:
                dfs(new_x,new_y)
    return  True

for i in range(N):
    for u in range(M):
        if dfs(u,i) is True:
            count+=1
print(count)


미로 탈출
동빈이는 N x M 크기의 직사각형 형태의 미로에 갇혀 있다. 미로에는 여러 마리의 괴물이 있어 이를 피해 탈출해야 한다. 
동빈이의 위치는 (1, 1)이고 미로의 출구는 (N, M)의 위치에 존재하며 한 번에 한 칸씩 이동할 수 있다. 
이때 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있다. 미로는 반드시 탈출할 수 있는 형태로 제시된다. 
이때 동빈이가 탈출하기 위해 움직여야 하는 최소 칸의 개수를 구하시오. 칸을 셀 때는 시작 칸과 마지막 칸을 모두 포함해서 계산한다.

SourceCode (dfs):
dx=[0,0,-1,1]
dy=[1,-1,0,0]
N,M=map(int,input().split())
graph=[]
stack=[]
def dfs(x,y):
    if graph[x][y]==1:
        stack.append((x,y))

        while stack:
            x,y=stack.pop()
            for i in range(4):
                new_x=x+dx[i]
                new_y=y+dy[i]
                if new_x>=0 and new_x<M and new_y>=0 and new_y<N:
                    if graph[new_x][new_y]==1:
                        stack.append((new_x,new_y))
                        graph[new_x][new_y]=graph[x][y]+1
        return graph[M-1][N-1]
for i in range(N):
    graph.append(list(map(int,input().split())))
print(dfs(0,0))
