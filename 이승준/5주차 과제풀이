#DFS와 BFS, 실버2
'''
문제
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

입력
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.

출력
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.
'''

## 코드
''' python
import sys
from collections import deque

def dfs(edge, v,visited):
    visited[v] = True   #방문자
    print(v,end=" ")
    for g in edge:  #간선 가져가기
        if v in g:  #간선에 v가 있는지 확인
            for i in range(2):
                if visited[g[i]] != True:   #간선에 연결된 노드가 True라면
                    dfs(edge, g[i], visited)    #재귀

def bfs(edge, v, visited):
    que = deque([v])
    visited[v] = True
    while que:
        s = que.popleft()
        print(s, end=' ')
        for g in edge:
            if s in g:
                for i in range(2):
                    if visited[g[i]] != True:
                        que.append(g[i])
                        visited[g[i]] = True

N, M, V = map(int, sys.stdin.readline().split())
edge = [[] for _ in range(M)]

for i in range(M):
    edge[i]=list(map(int, sys.stdin.readline().split()))

edge = sorted(edge,key= lambda x:sorted([x[0],x[1]]))   #간선을 정렬하는데 DFS의 경우 같은 위치상에 있을 때 작은 숫자부터 탐색해야 하기 때문에 2번 정렬

Visited = [False] * (N+1)   #방문자
dfs(edge,V,Visited)
print()
Visited = [False] * (N+1)   #방문자 초기화
bfs(edge,V,Visited)
'''
